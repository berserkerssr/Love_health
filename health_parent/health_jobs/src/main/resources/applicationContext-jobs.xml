<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
    <!-- 指定应用名称 -->
    <dubbo:application name="health_job" />
    <!--指定服务注册中心地址-->
    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>
    <!--批量扫描，组件扫描+@Reference-->
    <dubbo:annotation package="com.itheima.health.job" />
    <!--
        超时全局设置 10分钟
        check=false 不检查服务提供方，开发阶段建议设置为false
        check=true 启动时检查服务提供方，如果服务提供方没有启动则报错
    -->
    <dubbo:consumer timeout="600000" check="false"/>
    <!--文件上传组件-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="104857600" />
        <property name="maxInMemorySize" value="4096" />
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <!--1：配置自定义Job类-->
    <bean id="jobDemo" class="com.itheima.health.job.ClearImgJob"></bean>

    <!--配置第二个任务类-->
    <bean id="clearOrderSettingJob" class="com.itheima.health.job.ClearOrderSettingJob"></bean>

    <!--2：创建任务描述细节类（工厂），描述任务类和任务类中的方法-->
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="jobDemo"></property>
        <property name="targetMethod" value="deletePic"></property>
    </bean>
    <!--2:定义清除orderSetting要执行的方法-->
    <bean id="orderSettingMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="clearOrderSettingJob"></property>
        <property name="targetMethod" value="deleteOrderSetting"></property>
    </bean>


    <!--3：创建触发器对象（工厂），指定触发任务的时间
    2种触发器：
    1：SimpleTriggerFactoryBean：（频率）（每隔多长时间执行一次）
    2：CronTriggerFactoryBean：（定时定点）（功能更强大）
    -->
    <bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail"></property>
        <!--指定时间
             cronExpression：表达式，指定时间
             0/10 * * * * ? ：从0秒开始计算，每隔10秒执行一次任务
        -->
        <property name="cronExpression" value="10 27 12 * * ?"></property>
    </bean>
    <!--3：定义清除orderSetting方法的时间-->
    <bean id="orderSettingTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="orderSettingMethod"></property>
        <property name="cronExpression" value="0 0 2 L * ? *"></property>
    </bean>
    
    
    <!--4：创建任务调度对象（工厂），调度触发器-->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="trigger"></ref>
                <ref bean="orderSettingTime"></ref>
            </list>
        </property>
    </bean>
</beans>